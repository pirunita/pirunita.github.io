<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <generator uri="http://jekyllrb.com" version="3.8.5">Jekyll</generator>
  
  
  <link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" />
  <updated>2019-05-09T02:07:36+00:00</updated>
  <id>http://localhost:4000//</id>

  
    <title type="html">pirunita</title>
  

  
    <subtitle>pirunita</subtitle>
  

  
    <author>
        <name>pirunita</name>
      
      
    </author>
  

  
  
    <entry xml:lang="ko">
      
      <title type="html">[Python] Effective Python(2) - List(1)</title>
      
      
      <link href="http://localhost:4000/2019/05/09/Effective_Python2/" rel="alternate" type="text/html" title="[Python] Effective Python(2) - List(1)" />
      
      <published>2019-05-09T02:00:00+00:00</published>
      <updated>2019-05-09T02:00:00+00:00</updated>
      <id>http://localhost:4000/2019/05/09/Effective_Python2</id>
      <content type="html" xml:base="http://localhost:4000/2019/05/09/Effective_Python2/">&lt;h2&gt;시퀀스 슬라이싱&lt;/h2&gt;
&lt;p&gt;  파이썬은 슬라이싱으로 특정 subset에 접근할 수 있다. 가장 간단한 슬라이싱 대상은 list, str, bytes이다.
슬라이싱 문법은 somelist[start:end]이며, start 인덱스는 포함되고 end 인덱스는 제외된다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;한 슬라이스에 start, end, stride를 함께 쓰지 않는다.&lt;/h2&gt;

&lt;p&gt;   somelist[start:end:stride]처럼 슬라이스의 간격을 설정하는 특별한 문법도 있다. 이를 통해 시퀀스를 슬라이싱할 때 매 n번째 아이템을 가져올 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;odds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;evens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만 stride는 예상치 못한 동작을 하는데 파이썬에서 바이트 문자열을 역순으로 만드는 방법은 stride -1로 문자열을 슬라이싱 한다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'mongoose'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'esoognom'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 코드는 바이트 문자열이나 아스키 문자에는 잘 동작하지만 UTF-8 바이트 문자열로 인코드 된 유니코드 문자에서는 잘 동작하지 않는다.&lt;/p&gt;

&lt;p&gt;stride의 다양한 문법을 보자.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'g'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'h'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# ['a', 'c', 'e', 'g']
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# ['h', 'f', 'd', 'b'] 끝부터 시작해서 반대방향으로 두번 째 아이템 선택
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# ['c', 'e', 'g']
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# ['g', 'e', 'c', 'a']
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# ['g', 'e']
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# []
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;슬라이싱에서 stride는 매우 혼란스러울 수 있다. 따라서 stride를 start, end 인덱스와 함께 사용하지 않는 것이 좋으며 만약 사용한다면 &lt;strong&gt;양수 값을 사용하고 start와 end는 생략&lt;/strong&gt;한다. 만약 stride를 start, end와 같이 사용해야 한다면 stride 적용 결과를 변수에 할당하고 슬라이싱 결과를 다른 변수에 할당한다.&lt;/p&gt;

&lt;p&gt;stride -&amp;gt; slicing&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 slicing -&amp;gt; stride를 하면 데이터의 얕은 복사본이 추가로 생긴다.&lt;/p&gt;

&lt;h2&gt;map과 filter 대신 list comprehension을 사용&lt;/h2&gt;
&lt;p&gt;  파이썬에서는 한 리스트에서 다른 리스트를 만들 수 있는 list comprehension이 있다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;squares&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squares&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;81&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;인수가 하나뿐인 함수를 적용하는 것이 아니면 간단한 연산은 list comprehension이 내장 함수 amp보다 명확하다. map은 계산에 필요한 lambda를 생성해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;squares&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
또한 list comprehension을 사용하면 입력 리스트의 아이템을 잘라내서 그에 대응하는 출력을 삭제할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;even_squres&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
내장 함수 filter를 map과 같이 사용하면 읽기가 어려워진다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;또한 dictionary, set에도 list comprehension에 해당하는 문법이 존재한다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;color_channels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'green'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rank_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color_channels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;color_len_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color_channels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rank_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color_len_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'green'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>pirunita</name>
          
          
        </author>
      

      

      
        <category term="Python" />
      

      
        <summary type="html">시퀀스 슬라이싱   파이썬은 슬라이싱으로 특정 subset에 접근할 수 있다. 가장 간단한 슬라이싱 대상은 list, str, bytes이다. 슬라이싱 문법은 somelist[start:end]이며, start 인덱스는 포함되고 end 인덱스는 제외된다. a = [1, 2, 3, 4, 5, 6, 7] print(a[:4]) print(a[-4:]) print(a[3:-3]) &amp;gt;&amp;gt;&amp;gt; 1, 2, 3, 4 4, 5, 6, 7 4, 5 한 슬라이스에 start, end, stride를 함께 쓰지 않는다.    somelist[start:end:stride]처럼 슬라이스의 간격을 설정하는 특별한 문법도 있다. 이를 통해 시퀀스를 슬라이싱할 때 매 n번째 아이템을 가져올 수 있다. a = ['a', 'b', 'c', 'd', 'e', 'f'] odds = a[::2] evens = a[1::2] print(odds) print(evens) &amp;gt;&amp;gt;&amp;gt; ['a', 'c', 'e'] ['b', 'd', 'f'] 하지만 stride는 예상치 못한 동작을 하는데 파이썬에서 바이트 문자열을 역순으로 만드는 방법은 stride -1로 문자열을 슬라이싱 한다. x = b'mongoose' y = x[::-1] print(y) &amp;gt;&amp;gt;&amp;gt; b'esoognom' 위의 코드는 바이트 문자열이나 아스키 문자에는 잘 동작하지만 UTF-8 바이트 문자열로 인코드 된 유니코드 문자에서는 잘 동작하지 않는다. stride의 다양한 문법을 보자. a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] a[::2] # ['a', 'c', 'e', 'g'] a[::-2] # ['h', 'f', 'd', 'b'] 끝부터 시작해서 반대방향으로 두번 째 아이템 선택 a[2::2] # ['c', 'e', 'g'] a[-2::-2] # ['g', 'e', 'c', 'a'] a[-2:2:-2] # ['g', 'e'] a[2:2:-2] # [] 슬라이싱에서 stride는 매우 혼란스러울 수 있다. 따라서 stride를 start, end 인덱스와 함께 사용하지 않는 것이 좋으며 만약 사용한다면 양수 값을 사용하고 start와 end는 생략한다. 만약 stride를 start, end와 같이 사용해야 한다면 stride 적용 결과를 변수에 할당하고 슬라이싱 결과를 다른 변수에 할당한다. stride -&amp;gt; slicing b = a[::2] c = b[1:-1] 만약 slicing -&amp;gt; stride를 하면 데이터의 얕은 복사본이 추가로 생긴다. map과 filter 대신 list comprehension을 사용   파이썬에서는 한 리스트에서 다른 리스트를 만들 수 있는 list comprehension이 있다. a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] squares = [x**2 for x in a] print(squares) &amp;gt;&amp;gt;&amp;gt; [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] 인수가 하나뿐인 함수를 적용하는 것이 아니면 간단한 연산은 list comprehension이 내장 함수 amp보다 명확하다. map은 계산에 필요한 lambda를 생성해야 한다. squares = map(lambda x: x**2, a) 또한 list comprehension을 사용하면 입력 리스트의 아이템을 잘라내서 그에 대응하는 출력을 삭제할 수 있다. even_squres = [x**2 for x in a if x % 2 == 0] &amp;gt;&amp;gt;&amp;gt; [4, 16, 36, 64, 100] 내장 함수 filter를 map과 같이 사용하면 읽기가 어려워진다. alt = map(lambda x: x**2, filter(lambda x: x % 2 == 0, a)) 또한 dictionary, set에도 list comprehension에 해당하는 문법이 존재한다. color_channels = {'red': 1, 'green': 2, 'blue': 3} rank_dict = {rank: color for color, rank in color_channels.items()} color_len_set = {len(color) for color in color_channels.values()} print(rank_dict) print(color_len_set) &amp;gt;&amp;gt;&amp;gt; {1: 'red', 2: 'green', 3: 'blue'} {3, 5, 4}</summary>
      

      
      
    </entry>
  
  
  
    <entry xml:lang="ko">
      
      <title type="html">[Python] Effective Python(1) - Style Guide</title>
      
      
      <link href="http://localhost:4000/2019/05/09/Effective_Python1/" rel="alternate" type="text/html" title="[Python] Effective Python(1) - Style Guide" />
      
      <published>2019-05-09T00:00:00+00:00</published>
      <updated>2019-05-09T00:00:00+00:00</updated>
      <id>http://localhost:4000/2019/05/09/Effective_Python1</id>
      <content type="html" xml:base="http://localhost:4000/2019/05/09/Effective_Python1/">&lt;p&gt;  &lt;em&gt;현재 내가 대부분 진행하는 프로젝트는 python으로 짜여 있다. 하지만 python을 제대로 공부한 적이 없으며 pythonic하게 코드를 짜는 방법에 대해서 잘 알지 못하기에 이번에 공부하고자 한다.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;PEP 8 스타일 가이드&lt;/h2&gt;
&lt;p&gt;  파이썬 개선 제안서(Python Enhancement Proposal) #8 즉, PEP 8은 파이썬 코드를 어떻게 구성할 지 알려주는 스타일 가이드다. 이 때 반드시 따라야 하는 규칙이 있다.&lt;/p&gt;

&lt;h3&gt;화이트 스페이스&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;탭이 아닌 스페이스로 들여쓴다.&lt;/li&gt;
  &lt;li&gt;문법적으로 의미가 있는 들여쓰기는 스페이스 4개를 사용한다.&lt;/li&gt;
  &lt;li&gt;한 줄의 문자 길이가 79자 이하여야 하며 표현식이 길어서 다른 줄로 이어지면 일반적인 들여쓰기에서 스페이스 네 개를 추가로 쓴다.&lt;/li&gt;
  &lt;li&gt;파일에서 함수와 클래스는 빈 줄 두개로 구분해야 한다.&lt;/li&gt;
  &lt;li&gt;클래스에서 메서드는 빈 줄 하나로 구분한다.&lt;/li&gt;
  &lt;li&gt;리스트 인덱스, 함수 호출, 키워드 인수 할당에는 스페이스를 사용하지 않는다.&lt;/li&gt;
  &lt;li&gt;변수 할당 앞 뒤에 스페이스를 하나만 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;명명 표기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;함수, 변수, 속성은 lowercase_underscore 형식을 따른다.&lt;/li&gt;
  &lt;li&gt;protected 인스턴스 속성은 _leading_underscore 형식을 따른다.&lt;/li&gt;
  &lt;li&gt;private 인스턴스 속성은 __double_leading_underscore 형식을 따른다.&lt;/li&gt;
  &lt;li&gt;클래스와 예외는 CapitalizedWord 형식을 따른다.&lt;/li&gt;
  &lt;li&gt;모듈 수준 상수는 ALL_CAPS 형식을 따른다.&lt;/li&gt;
  &lt;li&gt;클래스의 인스턴스 메서드에서 첫 번째 파라미터(해당 객체를 참조)의 이름을 self로 지정한다.&lt;/li&gt;
  &lt;li&gt;클래스 메서드에서 첫 번째 파라미터(해당 클래스를 참조)의 이름을 cls로 지정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;표현식과 문장&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;길이를 확인하는 (if len(somelist) == 0)이 아닌 if not some list를 사용하고, 빈 값은 암시적으로 False가 된다고 가정한다.&lt;/li&gt;
  &lt;li&gt;비어있지 않은 값에도 위와 같다. 값이 비어있지 않으면 if omselist 문이 암시적으로 True가 된다.&lt;/li&gt;
  &lt;li&gt;한줄로 된 if, for, while, except을 쓰지 않는다.&lt;/li&gt;
  &lt;li&gt;파일 맨 위에 import문을 놓는다.&lt;/li&gt;
  &lt;li&gt;module을 import 할 때 항상 모듈의 절대 이름을 사용한다.&lt;/li&gt;
  &lt;li&gt;Import는 ‘표준 라이브러리 모듈, 서드파티 모듈, 자신이 만든 모듈’ 섹션 순으로 구분한다. 각각의 하위 섹션에서는 알파벳 순서로 import 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;복잡한 표현식 대신 헬퍼 함수를 작성한다.&lt;/h2&gt;
&lt;p&gt;  파이썬의 간결한 문법을 이용하면 짧은 로직을 표현식 한 술로 작성할 수 있지만 읽기 어려워지는 경우가 있다.
다음은 URL에서 쿼리 문자열을 디코딩하는 코드이다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib.parse&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_qs&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my_values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_qs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'red=5&amp;amp;blue=0&amp;amp;green='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keep_blank_values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;repr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'5'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'green'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dictionary의 get 메서드를 사용하여 각 상황에 따라 다른 값을 반환한다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'red: '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'green: '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'green'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'purple: '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'purple'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'5'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;purple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 때 파라미터가 없거나 비어 있으면 0을 할당하게 한다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'green'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;purple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'purple'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'red: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'green: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'purple: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;purple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'5'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;purple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;if/else 조건식(삼항 표현식)을 이용하여 명확하게 표현한다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 로직을 반복해서 사용한다면 헬퍼 함수를 만든다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_first_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_first_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'green'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>pirunita</name>
          
          
        </author>
      

      

      
        <category term="Python" />
      

      
        <summary type="html">  현재 내가 대부분 진행하는 프로젝트는 python으로 짜여 있다. 하지만 python을 제대로 공부한 적이 없으며 pythonic하게 코드를 짜는 방법에 대해서 잘 알지 못하기에 이번에 공부하고자 한다. PEP 8 스타일 가이드   파이썬 개선 제안서(Python Enhancement Proposal) #8 즉, PEP 8은 파이썬 코드를 어떻게 구성할 지 알려주는 스타일 가이드다. 이 때 반드시 따라야 하는 규칙이 있다. 화이트 스페이스 탭이 아닌 스페이스로 들여쓴다. 문법적으로 의미가 있는 들여쓰기는 스페이스 4개를 사용한다. 한 줄의 문자 길이가 79자 이하여야 하며 표현식이 길어서 다른 줄로 이어지면 일반적인 들여쓰기에서 스페이스 네 개를 추가로 쓴다. 파일에서 함수와 클래스는 빈 줄 두개로 구분해야 한다. 클래스에서 메서드는 빈 줄 하나로 구분한다. 리스트 인덱스, 함수 호출, 키워드 인수 할당에는 스페이스를 사용하지 않는다. 변수 할당 앞 뒤에 스페이스를 하나만 사용한다. 명명 표기 함수, 변수, 속성은 lowercase_underscore 형식을 따른다. protected 인스턴스 속성은 _leading_underscore 형식을 따른다. private 인스턴스 속성은 __double_leading_underscore 형식을 따른다. 클래스와 예외는 CapitalizedWord 형식을 따른다. 모듈 수준 상수는 ALL_CAPS 형식을 따른다. 클래스의 인스턴스 메서드에서 첫 번째 파라미터(해당 객체를 참조)의 이름을 self로 지정한다. 클래스 메서드에서 첫 번째 파라미터(해당 클래스를 참조)의 이름을 cls로 지정한다. 표현식과 문장 길이를 확인하는 (if len(somelist) == 0)이 아닌 if not some list를 사용하고, 빈 값은 암시적으로 False가 된다고 가정한다. 비어있지 않은 값에도 위와 같다. 값이 비어있지 않으면 if omselist 문이 암시적으로 True가 된다. 한줄로 된 if, for, while, except을 쓰지 않는다. 파일 맨 위에 import문을 놓는다. module을 import 할 때 항상 모듈의 절대 이름을 사용한다. Import는 ‘표준 라이브러리 모듈, 서드파티 모듈, 자신이 만든 모듈’ 섹션 순으로 구분한다. 각각의 하위 섹션에서는 알파벳 순서로 import 한다. 복잡한 표현식 대신 헬퍼 함수를 작성한다.   파이썬의 간결한 문법을 이용하면 짧은 로직을 표현식 한 술로 작성할 수 있지만 읽기 어려워지는 경우가 있다. 다음은 URL에서 쿼리 문자열을 디코딩하는 코드이다. from urllib.parse import parse_qs my_values = parse_qs('red=5&amp;amp;blue=0&amp;amp;green=', keep_blank_values=True) print(repr(my_values)) &amp;gt;&amp;gt;&amp;gt; {'red': ['5'], 'green': [''], 'blue': ['0']} Dictionary의 get 메서드를 사용하여 각 상황에 따라 다른 값을 반환한다. print('red: ', my_values.get('red')) print('green: ', my_values.get('green')) print('purple: ', my_values.get('purple')) &amp;gt;&amp;gt;&amp;gt; red: ['5'] green: [''] purple: None 이 때 파라미터가 없거나 비어 있으면 0을 할당하게 한다. red = my_values.get('red', [''])[0] or 0 green = my_values.get('green', [''])[0] or 0 purple = my_values.get('purple', [''])[0] or 0 print('red: %r', %red) print('green: %r', %green) print('purple: %r', %purple) &amp;gt;&amp;gt;&amp;gt; red: '5' green: 0 purple: 0 if/else 조건식(삼항 표현식)을 이용하여 명확하게 표현한다. red = my_values.get('red', ['']) red = int(red[0]) if red[0] else 0 이 로직을 반복해서 사용한다면 헬퍼 함수를 만든다. def get_first_int(values, key, default=0): found = values.get(key, ['']) if found[0]: found = int(found[0]) else found = default return found green = get_first_int(my_values, 'green')</summary>
      

      
      
    </entry>
  
  
  
    <entry xml:lang="ko">
      
      <title type="html">[Python] profiling</title>
      
      
      <link href="http://localhost:4000/2019/05/03/Python-Profiling/" rel="alternate" type="text/html" title="[Python] profiling" />
      
      <published>2019-05-03T04:00:00+00:00</published>
      <updated>2019-05-03T04:00:00+00:00</updated>
      <id>http://localhost:4000/2019/05/03/%5BPython%5DProfiling</id>
      <content type="html" xml:base="http://localhost:4000/2019/05/03/Python-Profiling/">&lt;h2&gt;profiling으로 병목 지점 찾기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;코드의 속도상 병목과 RAM 사용 병목을 파악하는 방법&lt;/li&gt;
  &lt;li&gt;CPU와 메모리 사용량을 프로파일링하는 방법&lt;/li&gt;
  &lt;li&gt;얼마나 자세하게 프로파일링을 해야 하는가&lt;/li&gt;
  &lt;li&gt;장시간 실행되는 어플리케이션을 프로파일링 하는 방법&lt;/li&gt;
  &lt;li&gt;CPython의 내부 동작&lt;/li&gt;
  &lt;li&gt;성능을 튜닝하는 동안 코드의 올바름을 유지하는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;p&gt;  프로파일링을 하게 되면 RAM이 사용될 때 몰리는 병목 지점을 찾을 수 있기 때문에, 프로파일링을 하면 속도를 크게 향상 시키고 자원을 적게 사용할 수 있다는 장점이 있다.&lt;/p&gt;

&lt;p&gt;또한 CPU뿐만 아니라 GPU, RAM, 네트워크 대역폭, 디스크 I/O 등 측정 가능한 자원은 모두 프로파일링을 해 볼 수 있다.&lt;/p&gt;

&lt;h3&gt;2.1 효과적으로 프로파일링 하기&lt;/h3&gt;

&lt;p&gt;프로파일링의 첫 번째 목표 : 시스템의 어느 부분이 느린 지, 병목 현상이 어디서 일어나는 지 알 수 있다.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;주의: 프로파일링 시 평소보다 실행 속도가 느려지므로 검사할 부분만 따로 떼어내서 검사한다.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;프로파일링 방법은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;IPython의 %timeit 매직 명령어, time.time(), timing decorator&lt;/li&gt;
  &lt;li&gt;cProfile: 어떤 함수가 가장 오래 걸리는 지 확인할 수 있는 내장 도구&lt;/li&gt;
  &lt;li&gt;line_profiler: 선택한 함수를 한 줄씩 프로파일링
    &lt;ul&gt;
      &lt;li&gt;line_profiler을 통해 컴파일러를 사용할 부분을 결정할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;perf stat: CPU에서 실행된 명령의 수, CPU 캐시가 얼마나 효율적으로 활용 되었는 지 알 수 있다.(chap 6)&lt;/li&gt;
  &lt;li&gt;heapy: 파이썬 메모리에 상주하는 모든 객체를 확인
    &lt;ul&gt;
      &lt;li&gt;메모리 누수를 찾을 때 유용&lt;/li&gt;
      &lt;li&gt;장시간 실행되는 시스템이라면 dowser를 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;memory_profiler: 시간에 따른 RAM 사용 추이를 차트로 확인
    &lt;ul&gt;
      &lt;li&gt;RAM 사용량이 왜 높은 지 찾을 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CPython 내부에서 쓰이는 파이썬 바이트코드&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;2.2 시간을 측정하는 간단한 방법 - print와 데코레이터&lt;/h3&gt;
&lt;p&gt;  print문을 사용하는 경우는 코드를 더럽히지만 시간을 잠깐 조사하는 경우에 매우 유용하다.
(&lt;em&gt;작업이 끝나고 print문을 정리하지 않으면 표준 출력을 모두 잡아먹는다.&lt;/em&gt;)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;end_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time90&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;secs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;조금 더 깨끗한 방법으로 &lt;strong&gt;데코레이터&lt;/strong&gt;가 있다. 여기선 시간을 측정하고 싶은 함수 위에 코드 한 줄을 추가할 것이다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;functools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timefn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;measure_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@timefn: {} took {} seconds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;measure_time&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timefn&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculate_z_serial_purepython&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;추가적인 프로파일링 정보는 코드를 느려지게 만들 수 있다.&lt;/p&gt;

&lt;p&gt;이번에는 CPU를 많이 사용하는 함수의 실행 속도를 측정하는 다른 방법으로 timeit 모듈을 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python -m timeit -n 5 -r 5 -s &quot;import julia1&quot; &quot;julia1.calc_pure_python(desired_width=1000, max_iterations=300)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;여기서 &lt;strong&gt;calc_pure_python&lt;/strong&gt;이 모듈 안에 정의되어 있으므로 -s를 사용하여 module을 임포트해야한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-r 5: 반복횟수를 나타냄&lt;/li&gt;
  &lt;li&gt;-n 5: 각 검사에서 평균을 구하여 전체 반복 중 가장 나은 값을 출력&lt;/li&gt;
  &lt;li&gt;만약 -n, -r 옵션을 주지 않고 timeit을 수행했다면 기본값으로 5번씩 10회 반복 수행&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;2.3 cProfile module 사용&lt;/h3&gt;
&lt;p&gt;  cProfile은 표준 라이브러리가 제공하는 3가지 프로파일러 중 하나이다.(hotshot, profile)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;tip: 프로파일링을하기 전에 프로파일링하려는 코드의 기대 속도에 대한 가설을 세우는 습관을 들이는 것이 좋다. 의심스러운 코드를 출력해서 메모하는 방식이 좋다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python -m cProfile -s cumulative julia1_nopil.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;-s cumulative: 각 함수에서 소비한 누적 시간순으로 정렬되어 어떤 함수가 더 느린지 쉽게 확인 가능
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python -m cProfile -o profile.stats julia1.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;cProfile의 결과를 더 세밀하게 살펴보려면 통계 파일을 생성한 뒤 파이썬으로 분석할 수 있다. 이제 다음과 같이 파이썬에서 통계 파일을 불러들이면 앞서 살펴본 출력과 같은 결과를 확인할 수 있다.
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pstats&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pstats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;profile.stats&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort_stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cumulative&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;프로파일링 중인 함수를 추적하기 위해 해당 함수를 호출한 측(caller)의 정보를 출력한다.
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_callers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;이를 통해 어떤 함수가 몇 번 호출했고 수행시간을 측정할 수 있다. 또한 다음 방법으로 해당 함수에서 호출하는 함수 목록도 확인할 수 있다.
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_callees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;2.4 line_profiler로 한 줄씩 측정하기&lt;/h3&gt;
&lt;p&gt;  line_profiler은 파이썬 코드에서 CPU 병목 원인을 찾아주는 가장 강력한 도구일 것이다. &lt;em&gt;line_profiler는 개별 함수를 한 줄씩 프로파일링할 수 있으므로&lt;/em&gt; cProfile로 어떤 함수를 line_profiler로 자세히 살펴볼 지에 대한 전체적인 방향을 정한다.&lt;/p&gt;

&lt;p&gt;먼저 line_profiler를 설치한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install line_profiler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;@profiler: decorator, 선택한 함수를 표시하기 위해 사용&lt;/li&gt;
  &lt;li&gt;kernprof.py: 코드를 실행하고 선택한 함수의 각 줄에 대한 CPU 시간 등의 통계를 기록&lt;/li&gt;
  &lt;li&gt;-l: l옵션은 함수 단위가 아닌 &lt;strong&gt;한 줄씩 프로파일링&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;-v: v옵션은 출력 결과를 다양하게 보여준다. -v를 주지 않으면 line_profiler 모듈을 이용한 분석에 사용할 수 있는 .lprof 결과를 받는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kernprof.py -l -v julia1_lineprofiler.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 내용에서 print만으로 걸린 측정 시간은 13초, cProfile은 19초, 하지만 line_profiler은 100초가 소요되지만 각 줄이 실행되는 데 걸린 시간을 확인할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;tip: while문에서 조건이 2개 이상이라면 이를 분리해서 if조건문으로 처리 해 준 후에 측정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;또한 파이썬은 다른 부분을 계산하지 않고 전체 결과를 확정할 수 있으면 전체를 확정지어 버리기 때문에 while문의 연산 순서를 바꿈으로써 유의미한 속도 개선을 기대할 수 있다.&lt;/p&gt;

&lt;h3&gt;2.5 memory_profiler로 메모리 사용량 진단하기&lt;/h3&gt;
&lt;p&gt;  메모리 사용량을 줄단위로 측정해주는 memory_profiler이다. 이를 통해서 다음을 알 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이 함수를 더 효과적으로 작동하게 고쳐서 RAM을 덜 사용할 수 있는가&lt;/li&gt;
  &lt;li&gt;캐시를 두어 RAM을 조금 더 쓰는 대신 CPU 사이클을 아길 수 있을까?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;memory_profiler는 line_profiler와 흡사하게 작동하지만 훨씬 느리다. psutil 패키지를 설치하면 memory_profiler를 더 빠르게 실행할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install memory_profiler
pip install psutil
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;memory_profiler은 느리기 때문에 최소한의 시간에 프로파일링을 마칠 수 있도록 코드의 일부만 떼어내 검사하는 편이 좋다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python -m momry_profiler julia1_memoryprofiler.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;메모리 사용량의 변화를 시각화하는 방법은 시간에 따라 샘플링하고 그 결과를 그래프로 그려보는 것이다. memory_profiler에 포함된 mprof는 메모리 사용량을 샘플링한 후 시각화하며, 시간에 따라 샘플링하기 때문에 코드 실행시간에 큰 영향을 주지 않는다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mprof run julia1_memoryprofiler.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;통계 파일을 먼저 생성하고 mprof plot 명령으로 시각화한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;range vs xrange?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;2.6 최적화 중에 단위 테스트 하기&lt;/h3&gt;
&lt;p&gt;  단위 테스트를 하지 않으면 장기적으로 생산성을 떨어트린다. 단위 테스트와 더불어 coverage.py도 함께 고려한다. coverage.py는 코드의 어떤 부분이 검사되었고 검사되지 않은 부분은 어디인지 알 수 있다.&lt;/p&gt;

&lt;h4&gt;no-op @profiler 데코레이터&lt;/h4&gt;
&lt;p&gt;  line_profiler나 memory_profiler에서 @profile을 사용하면 단위테스트에서 NameError 예외가 발생한다. 단위 테스트 프레임워크는 @profile 데코레이터를 로컬 네임스페이스에 추가하지 않았기 때문에 &lt;strong&gt;no-op decorator&lt;/strong&gt;를 이용하면 이 문제를 피할 수 있다. 검사하려는 코드 블록에 추가하고 검사가 끝나면 제거한다.&lt;/p&gt;

&lt;p&gt;no-op를 이용하면 검사하려는 코드를 변경하지 않고 테스트를 실행할 수 있고, 프로파일링을 통한 최적화 작업 중에도 테스트를 돌려볼 수 있기 때문에 잘못된 최적화에 빠지는 일을 방지할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# ex.py
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;unittest&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nbr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unittest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nosetests ex.py
E
================================================
ERROR: Failure: NameError (name 'profile' is not defined)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;따라서 해결책은 ex.py의 첫 부분에 no-op 데코레이터를 추가하는 것이다.(프로파일링이 끝나고 제거하면 된다.)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;단위 테스트를 위해 네임스페이스에 no-op @profiler 데코레이터 추가하기(line_profiler)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# line_profiler용
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__builtin__'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hasattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__builtin__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'profile'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;‘__builtin __’ 테스트는 nosetest 유무를 위한 것이고 hasattr 테스트는 네임스페이스에 @profile이 추가되었는 지 검사한다.&lt;/p&gt;

&lt;p&gt;$ kernprof.py -v -l ex.py
Line #     Hits        Time Per %%HTMLit    % Time Line Contests
=====================================================================
  11                                              @profile
  12                                              def some_fn(nbr):
  13          1           3     3.0       100.0       return nbr * 2&lt;/p&gt;

&lt;p&gt;$ nosetests ex.py
.
Ran 1 test in 0.000s&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
* 단위 테스트를 위해 네임스페이스에 no-op @profiler 데코레이터 추가하기(memory_profiler)

~~~python
# memory_profiler용
if 'profile' not in dir():
    def profile(func):
        def inner(*args, **kwargs):
            return func(*args, **kwargs)
        return inner
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python -m memory_profiler ex.py
...
Line #      Mem usage     Increment     Line Contents
=====================================================================
    11      10.809 MiB    0.000 MiB     @profile
    12                                  def some_fn(nbr):
    13      10.809 MiB    0.000 MiB         return nbr * 2

$ nosestests ex.py
.
Ran 1 test in 0.000s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>pirunita</name>
          
          
        </author>
      

      

      
        <category term="Python" />
      

      
        <summary type="html">profiling으로 병목 지점 찾기 코드의 속도상 병목과 RAM 사용 병목을 파악하는 방법 CPU와 메모리 사용량을 프로파일링하는 방법 얼마나 자세하게 프로파일링을 해야 하는가 장시간 실행되는 어플리케이션을 프로파일링 하는 방법 CPython의 내부 동작 성능을 튜닝하는 동안 코드의 올바름을 유지하는 방법   프로파일링을 하게 되면 RAM이 사용될 때 몰리는 병목 지점을 찾을 수 있기 때문에, 프로파일링을 하면 속도를 크게 향상 시키고 자원을 적게 사용할 수 있다는 장점이 있다. 또한 CPU뿐만 아니라 GPU, RAM, 네트워크 대역폭, 디스크 I/O 등 측정 가능한 자원은 모두 프로파일링을 해 볼 수 있다. 2.1 효과적으로 프로파일링 하기 프로파일링의 첫 번째 목표 : 시스템의 어느 부분이 느린 지, 병목 현상이 어디서 일어나는 지 알 수 있다. (주의: 프로파일링 시 평소보다 실행 속도가 느려지므로 검사할 부분만 따로 떼어내서 검사한다.) 프로파일링 방법은 다음과 같다. IPython의 %timeit 매직 명령어, time.time(), timing decorator cProfile: 어떤 함수가 가장 오래 걸리는 지 확인할 수 있는 내장 도구 line_profiler: 선택한 함수를 한 줄씩 프로파일링 line_profiler을 통해 컴파일러를 사용할 부분을 결정할 수 있다. perf stat: CPU에서 실행된 명령의 수, CPU 캐시가 얼마나 효율적으로 활용 되었는 지 알 수 있다.(chap 6) heapy: 파이썬 메모리에 상주하는 모든 객체를 확인 메모리 누수를 찾을 때 유용 장시간 실행되는 시스템이라면 dowser를 사용한다. memory_profiler: 시간에 따른 RAM 사용 추이를 차트로 확인 RAM 사용량이 왜 높은 지 찾을 수 있다. CPython 내부에서 쓰이는 파이썬 바이트코드 2.2 시간을 측정하는 간단한 방법 - print와 데코레이터   print문을 사용하는 경우는 코드를 더럽히지만 시간을 잠깐 조사하는 경우에 매우 유용하다. (작업이 끝나고 print문을 정리하지 않으면 표준 출력을 모두 잡아먹는다.) import time def print_time(): start_time = time.time() output = func() end_time = time.time90 secs = end_time - start_time 조금 더 깨끗한 방법으로 데코레이터가 있다. 여기선 시간을 측정하고 싶은 함수 위에 코드 한 줄을 추가할 것이다. from functools import wraps def timefn(fn): @wraps(fn) def measure_time(*args, **kwargs): t1 = time.time() result = fn(*args, **kwargs) t2 = time.time() print(&quot;@timefn: {} took {} seconds&quot;.format(fn.__name__, t2- t1)) return measure_time @timefn def calculate_z_serial_purepython(maxiter, zs, cs): ... 추가적인 프로파일링 정보는 코드를 느려지게 만들 수 있다. 이번에는 CPU를 많이 사용하는 함수의 실행 속도를 측정하는 다른 방법으로 timeit 모듈을 사용할 수 있다. $ python -m timeit -n 5 -r 5 -s &quot;import julia1&quot; &quot;julia1.calc_pure_python(desired_width=1000, max_iterations=300)&quot; 여기서 calc_pure_python이 모듈 안에 정의되어 있으므로 -s를 사용하여 module을 임포트해야한다. -r 5: 반복횟수를 나타냄 -n 5: 각 검사에서 평균을 구하여 전체 반복 중 가장 나은 값을 출력 만약 -n, -r 옵션을 주지 않고 timeit을 수행했다면 기본값으로 5번씩 10회 반복 수행 2.3 cProfile module 사용   cProfile은 표준 라이브러리가 제공하는 3가지 프로파일러 중 하나이다.(hotshot, profile) tip: 프로파일링을하기 전에 프로파일링하려는 코드의 기대 속도에 대한 가설을 세우는 습관을 들이는 것이 좋다. 의심스러운 코드를 출력해서 메모하는 방식이 좋다. python -m cProfile -s cumulative julia1_nopil.py -s cumulative: 각 함수에서 소비한 누적 시간순으로 정렬되어 어떤 함수가 더 느린지 쉽게 확인 가능 python -m cProfile -o profile.stats julia1.py cProfile의 결과를 더 세밀하게 살펴보려면 통계 파일을 생성한 뒤 파이썬으로 분석할 수 있다. 이제 다음과 같이 파이썬에서 통계 파일을 불러들이면 앞서 살펴본 출력과 같은 결과를 확인할 수 있다. import pstats p = pstats.Stats(&quot;profile.stats&quot;) p.sort_stats(&quot;cumulative&quot;) p.print_stats() 프로파일링 중인 함수를 추적하기 위해 해당 함수를 호출한 측(caller)의 정보를 출력한다. p.print_callers() 이를 통해 어떤 함수가 몇 번 호출했고 수행시간을 측정할 수 있다. 또한 다음 방법으로 해당 함수에서 호출하는 함수 목록도 확인할 수 있다. p.print_callees() 2.4 line_profiler로 한 줄씩 측정하기   line_profiler은 파이썬 코드에서 CPU 병목 원인을 찾아주는 가장 강력한 도구일 것이다. line_profiler는 개별 함수를 한 줄씩 프로파일링할 수 있으므로 cProfile로 어떤 함수를 line_profiler로 자세히 살펴볼 지에 대한 전체적인 방향을 정한다. 먼저 line_profiler를 설치한다. pip install line_profiler @profiler: decorator, 선택한 함수를 표시하기 위해 사용 kernprof.py: 코드를 실행하고 선택한 함수의 각 줄에 대한 CPU 시간 등의 통계를 기록 -l: l옵션은 함수 단위가 아닌 한 줄씩 프로파일링 -v: v옵션은 출력 결과를 다양하게 보여준다. -v를 주지 않으면 line_profiler 모듈을 이용한 분석에 사용할 수 있는 .lprof 결과를 받는다. kernprof.py -l -v julia1_lineprofiler.py 이 내용에서 print만으로 걸린 측정 시간은 13초, cProfile은 19초, 하지만 line_profiler은 100초가 소요되지만 각 줄이 실행되는 데 걸린 시간을 확인할 수 있다. tip: while문에서 조건이 2개 이상이라면 이를 분리해서 if조건문으로 처리 해 준 후에 측정한다. 또한 파이썬은 다른 부분을 계산하지 않고 전체 결과를 확정할 수 있으면 전체를 확정지어 버리기 때문에 while문의 연산 순서를 바꿈으로써 유의미한 속도 개선을 기대할 수 있다. 2.5 memory_profiler로 메모리 사용량 진단하기   메모리 사용량을 줄단위로 측정해주는 memory_profiler이다. 이를 통해서 다음을 알 수 있다. 이 함수를 더 효과적으로 작동하게 고쳐서 RAM을 덜 사용할 수 있는가 캐시를 두어 RAM을 조금 더 쓰는 대신 CPU 사이클을 아길 수 있을까? memory_profiler는 line_profiler와 흡사하게 작동하지만 훨씬 느리다. psutil 패키지를 설치하면 memory_profiler를 더 빠르게 실행할 수 있다. pip install memory_profiler pip install psutil memory_profiler은 느리기 때문에 최소한의 시간에 프로파일링을 마칠 수 있도록 코드의 일부만 떼어내 검사하는 편이 좋다. python -m momry_profiler julia1_memoryprofiler.py 메모리 사용량의 변화를 시각화하는 방법은 시간에 따라 샘플링하고 그 결과를 그래프로 그려보는 것이다. memory_profiler에 포함된 mprof는 메모리 사용량을 샘플링한 후 시각화하며, 시간에 따라 샘플링하기 때문에 코드 실행시간에 큰 영향을 주지 않는다. mprof run julia1_memoryprofiler.py 통계 파일을 먼저 생성하고 mprof plot 명령으로 시각화한다. range vs xrange? 2.6 최적화 중에 단위 테스트 하기   단위 테스트를 하지 않으면 장기적으로 생산성을 떨어트린다. 단위 테스트와 더불어 coverage.py도 함께 고려한다. coverage.py는 코드의 어떤 부분이 검사되었고 검사되지 않은 부분은 어디인지 알 수 있다. no-op @profiler 데코레이터   line_profiler나 memory_profiler에서 @profile을 사용하면 단위테스트에서 NameError 예외가 발생한다. 단위 테스트 프레임워크는 @profile 데코레이터를 로컬 네임스페이스에 추가하지 않았기 때문에 no-op decorator를 이용하면 이 문제를 피할 수 있다. 검사하려는 코드 블록에 추가하고 검사가 끝나면 제거한다. no-op를 이용하면 검사하려는 코드를 변경하지 않고 테스트를 실행할 수 있고, 프로파일링을 통한 최적화 작업 중에도 테스트를 돌려볼 수 있기 때문에 잘못된 최적화에 빠지는 일을 방지할 수 있다. # ex.py import unittest @profile def some_fn(nbr): return nbr * 2 cass TestCase(unittest.TestCase): def test(self): result = some_fn(2) self.assertEquals(result, 4) $ nosetests ex.py E ================================================ ERROR: Failure: NameError (name 'profile' is not defined) 따라서 해결책은 ex.py의 첫 부분에 no-op 데코레이터를 추가하는 것이다.(프로파일링이 끝나고 제거하면 된다.) 단위 테스트를 위해 네임스페이스에 no-op @profiler 데코레이터 추가하기(line_profiler) # line_profiler용 if '__builtin__' not in dir() or not hasattr(__builtin__, 'profile'): def profile(func): def inner(*args, **kwargs): return func(*args, **kwargs) return inner ‘__builtin __’ 테스트는 nosetest 유무를 위한 것이고 hasattr 테스트는 네임스페이스에 @profile이 추가되었는 지 검사한다. $ kernprof.py -v -l ex.py Line # Hits Time Per %%HTMLit % Time Line Contests ===================================================================== 11 @profile 12 def some_fn(nbr): 13 1 3 3.0 100.0 return nbr * 2 $ nosetests ex.py . Ran 1 test in 0.000s * 단위 테스트를 위해 네임스페이스에 no-op @profiler 데코레이터 추가하기(memory_profiler) ~~~python # memory_profiler용 if 'profile' not in dir(): def profile(func): def inner(*args, **kwargs): return func(*args, **kwargs) return inner python -m memory_profiler ex.py ... Line # Mem usage Increment Line Contents ===================================================================== 11 10.809 MiB 0.000 MiB @profile 12 def some_fn(nbr): 13 10.809 MiB 0.000 MiB return nbr * 2 $ nosestests ex.py . Ran 1 test in 0.000s</summary>
      

      
      
    </entry>
  
  
  
    <entry xml:lang="ko">
      
      <title type="html">2019-05-02</title>
      
      
      <link href="http://localhost:4000/2019/05/02/Daily/" rel="alternate" type="text/html" title="2019-05-02" />
      
      <published>2019-05-02T15:00:00+00:00</published>
      <updated>2019-05-02T15:00:00+00:00</updated>
      <id>http://localhost:4000/2019/05/02/Daily</id>
      <content type="html" xml:base="http://localhost:4000/2019/05/02/Daily/">&lt;h3&gt;일상 및 생각&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;본격적인 사업 초기 자금 확보를 위해 4월 달에 지원했던 사업들이 하나 둘 결과가 나왔다. 금액이 크든 작든 매우 소중한 자본이지만 때에 따라서는 선택과 집중이 필요할 때도 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;근 1년만에 백화점에서 쇼핑을 했다. 명색이 패션 관련 스타트업인데, 매일 아디다스 츄리닝 차림으로 맥북 하나 들고 &lt;strong&gt;내 사진&lt;/strong&gt;에 수 천장의 옷을 입혀 보았다. 처음으로 누군가와 함께하는 쇼핑의 즐거움을 깨달았다. 사랑하는 사람과 함께 옷을 입어보고 쇼핑한다는 것은 이토록 즐거운 일이었다. 내가 만들고자 하는 서비스는 이 이상의 가치를 줄 수 있을까&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;개발 능력이 퇴화하는 것 같다. 매번 Daily 글을 쓰는 것은 나를 반성하게 한다. 내일부터 조금씩 다시 코딩 한 줄이라도 쳐야겠다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;어느 새 5월, 미국에서 우리나라로 귀국한 지도 두 달이 조금 넘었다. 미국 후기 이런 것도 써 보려 했는데 역시 나는 게으름뱅이이다. 귀국하고 이런 저런 일들이 많았는데 올해 이렇게 포스팅을 3개나 쓴 내 자신이 약간의 변화들을 일으키고 있지 않은가 생각하게 된다. 무엇보다 markdown이 너무 편하다. 다른 블로그 사이트들은 기능이 너무 많다. 물론 Markdown도 블로그에 준하는 기능들을 쓸 수 있지만 이렇게 글만 남기고 대충 push해도 그럴 듯 해 보이고 신경쓸 게 없다. 사진을 넣는 게 조금 귀찮은 데 귀찮아서 사진은 안 올린다. 이보다 단순한 블로그질은 없을 것이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;학습 돌리고 정리하고 웹툰보고 글 쓰고 놀다보니 새벽 3시가 되었다. 가끔 모두가 자고 홀로 깨어있는 주중의 밤이 이렇게 좋을 수가 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;피아노 치고 싶다&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      
        <author>
            <name>pirunita</name>
          
          
        </author>
      

      

      
        <category term="Daily" />
      

      
        <summary type="html">일상 및 생각 본격적인 사업 초기 자금 확보를 위해 4월 달에 지원했던 사업들이 하나 둘 결과가 나왔다. 금액이 크든 작든 매우 소중한 자본이지만 때에 따라서는 선택과 집중이 필요할 때도 있다. 근 1년만에 백화점에서 쇼핑을 했다. 명색이 패션 관련 스타트업인데, 매일 아디다스 츄리닝 차림으로 맥북 하나 들고 내 사진에 수 천장의 옷을 입혀 보았다. 처음으로 누군가와 함께하는 쇼핑의 즐거움을 깨달았다. 사랑하는 사람과 함께 옷을 입어보고 쇼핑한다는 것은 이토록 즐거운 일이었다. 내가 만들고자 하는 서비스는 이 이상의 가치를 줄 수 있을까 개발 능력이 퇴화하는 것 같다. 매번 Daily 글을 쓰는 것은 나를 반성하게 한다. 내일부터 조금씩 다시 코딩 한 줄이라도 쳐야겠다. 어느 새 5월, 미국에서 우리나라로 귀국한 지도 두 달이 조금 넘었다. 미국 후기 이런 것도 써 보려 했는데 역시 나는 게으름뱅이이다. 귀국하고 이런 저런 일들이 많았는데 올해 이렇게 포스팅을 3개나 쓴 내 자신이 약간의 변화들을 일으키고 있지 않은가 생각하게 된다. 무엇보다 markdown이 너무 편하다. 다른 블로그 사이트들은 기능이 너무 많다. 물론 Markdown도 블로그에 준하는 기능들을 쓸 수 있지만 이렇게 글만 남기고 대충 push해도 그럴 듯 해 보이고 신경쓸 게 없다. 사진을 넣는 게 조금 귀찮은 데 귀찮아서 사진은 안 올린다. 이보다 단순한 블로그질은 없을 것이다. 학습 돌리고 정리하고 웹툰보고 글 쓰고 놀다보니 새벽 3시가 되었다. 가끔 모두가 자고 홀로 깨어있는 주중의 밤이 이렇게 좋을 수가 없다. 피아노 치고 싶다</summary>
      

      
      
    </entry>
  
  
  
    <entry xml:lang="ko">
      
      <title type="html">[Docker] Container Image 실행하기</title>
      
      
      <link href="http://localhost:4000/2019/04/21/Docker-containerimage/" rel="alternate" type="text/html" title="[Docker] Container Image 실행하기" />
      
      <published>2019-04-21T15:00:00+00:00</published>
      <updated>2019-04-21T15:00:00+00:00</updated>
      <id>http://localhost:4000/2019/04/21/%5BDocker%5Dcontainerimage</id>
      <content type="html" xml:base="http://localhost:4000/2019/04/21/Docker-containerimage/">&lt;h2&gt;컨테이너 이미지 실행하기&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;  &lt;strong&gt;docker run&lt;/strong&gt; 커맨드는 인터넷이 연결되어 있다면 자동으로 image를 찾아서 다운받고 구동한다.
예를 들어 fedora를 container에 띄우고 싶을 때&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run fedora cat /etc/os-release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;cat /etc/os-release: container에 실행되고 있는 OS의 버전과 종류 확인&lt;/li&gt;
  &lt;li&gt;이미지 이름 뒤에 태그를 지정하지 않았ㅇ므ㅡ로 :latest를 지정&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Image vs Container&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Image: Container instance가 영구적으로 저장된 것
    &lt;ul&gt;
      &lt;li&gt;docker images: 현재 시스템에 저장된 이미지를 볼 수 있다.&lt;/li&gt;
      &lt;li&gt;docker rmi &lt;image_name&gt;: 원하는 image 삭제&lt;/image_name&gt;&lt;/li&gt;
      &lt;li&gt;docker run: image 실행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Container: Image를 실행하면 container가 생성되며 백그라운드에서 실행하면(-d 옵션) 커맨드 종료 후에도 계속 구동할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;docker ps: 현재 실행 중인 컨테이너를 본다.
        &lt;ul&gt;
          &lt;li&gt;-a: container가 종료될 때 그 시점의 container 상태가 저장되며 그 때 -a를 붙여도 표시되지 않는다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;docker start &lt;container_name&gt;: 컨테이너 재구동
&lt;/container_name&gt;        &lt;ul&gt;
          &lt;li&gt;-i: container의 실행 결과가 로컬 셸로 전달된다.
            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker start -i 28172e7ffbc6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;docker stop &lt;container_name&gt;: 컨테이너 멈춤&lt;/container_name&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3&gt;인터렉티브 방식으로 container image 구동하기&lt;/h3&gt;
&lt;p&gt;  Container image를 구동하면, 지정한 커맨드를 실행한 뒤에 종료한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;-d: 웹 서버, 프린트 서비스와 같이 지속적으로 서비스를 제공하도록 커맨드를 백그라운드에서 계속 실행하게 한다.&lt;/li&gt;
  &lt;li&gt;-i: 포그라운드에서 인터렉티브 방식으로 실행한다.
    &lt;ul&gt;
      &lt;li&gt;-t: 인터렉티브 방식으로 실행할 때는 -t 옵션을 지정해서 터미널 세션을 별도로 열어주면 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4&gt;배시 셸 구동하기&lt;/h4&gt;
&lt;p&gt;  Container 안에서 별도로 셸을 실행해 작업을 수행하려면 container를 인터렉티브 방식으로 구동하는 것이 좋으며 container 내부에서 내용을 수정할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it ubuntu /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Container 내부에 bash shell을 띄웠으므로 어떤 프로세스가 실행되고 있는 지 확인 해 보자.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@baf3c3803a19:/# ps -e
  PID TTY          TIME CMD
    1 pts/0    00:00:00 bash
   13 pts/0    00:00:00 ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;ID가 1인 프로세스는 bash command&lt;/li&gt;
  &lt;li&gt;현재 실행되고 있는 프로세스는 ps command&lt;/li&gt;
  &lt;li&gt;Container마다 별도의 프로세스 테이블을 갖기 때문에 host의 프로세스는 확인 불가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Container 내부에 필요한 패키지를 설치한 후 exit를 통해 Container를 빠져나온다. 이 시점에서 Container를 image로 저장해두면 이 환경을 그대로 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; khosungpil@khosungpil  ~/docker   master  docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                            PORTS               NAMES
baf3c3803a19        ubuntu              &quot;/bin/bash&quot;         5 minutes ago       Exited (127) About a minute ago

 khosungpil@khosungpil  ~/docker   master  docker commit -a &quot;John&quot; baf3c3803a19 testrun
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이러면 로컬 시스템에 testrun이란 이름의 image가 생성되며 docker run을 통해 바로 사용할 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;서비스를 Container로 만들어 실행하기&lt;/h3&gt;

&lt;p&gt;  호스트에서 서비스를 직접 구동하는 것보다 서비스를 &lt;strong&gt;Container&lt;/strong&gt;에 담아 실행하는 편이 더 유리하다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;설정: 서비스를 Container 안에 담으면 서비스에 필요한 실행 파일, 라이브러리, 설정 파일 등 다양한 요소를 모두 설정할 수 있으며 다른 호스트에게 Image로 옮길 수 있다.&lt;/li&gt;
  &lt;li&gt;격리: Container마다 파일 시스템과 네트워크 인터페이스를 별도로 갖고 있기 때문에 동일한 서비스 Container를 원하는 수만큼 실행할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Container로 웹 서버 실행&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 80:80 -p 443:443 --name=MyWebServer \
-v /var/www/:/var/www testrun \
/usr/sbin/httpd -DFOREGROUND
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;-d: 데몬 모드로 실행, Container를 백그라운드에서 실행한다.&lt;/li&gt;
  &lt;li&gt;-p 80:80, -p 443:443: 포트 매핑, Container의 포트를 호스트의 포트에 연결한다. 클론의 왼쪽은 호스트의 포트고 오른쪽은 Container의 포트, Container의 TCP 80 포트(HTTP)와 443번 포트(HTTPS)를 호스트의 동일한 포트로 연결&lt;/li&gt;
  &lt;li&gt;–name=MyWebServer: Container 이름, Container ID 대신 지정한 이름을 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;-v /var/www/ : /var/www/: 마운트 지점 지정, 호스트의 디렉토리(클론의 왼쪽)를 Container의 디렉토리(클론의 오른쪽)에 마운트한다. -v 옵션을 사용해 apache의 default directory에 있는 공유 웹 콘텐츠를 사용하도록 지정&lt;/li&gt;
  &lt;li&gt;testrun: Image, 예제에서 사용한 Image 이름&lt;/li&gt;
  &lt;li&gt;/usr/sbin/httpd -DFOREGROUND: 커맨드, httpd 데몬에 -DFOREGROUND 옵션을 지정해 실행&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;따라서 호스트의 모든 IPV4 네트워크 인터페이스의 TCP 80번과 443번 포트로 들어오는 요청은 Container의 동일한 포트로 전달된다.&lt;/p&gt;

&lt;p&gt;구동중인 Container 내부를 탐색핫기 위해서 bash를 다시 실행할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker exec -it MyWebServer /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4&gt;Container에서 실행하는 서비스에서 사용할 resource 제한&lt;/h4&gt;
&lt;p&gt;  Container의 default는 메모리와 CPU의 사용량을 제한하지 않는다. –memory, –memory-swap, –cpu-shares, –cpuset-cpus 같은 옵션으로 메모리 용량과 CPU 개수에 제한을 걸 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 80:80 -p 443:443 --name=LimitedWebServer \
-v /var/www/ : /var/www/ --memory=10m -memory-swap=-1 \
--cpu-shares=256 testrun /usr/sbin/httpd -DFOREGROUND
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;여기서 Container는 10MB의 RAM만 사용할 수 있다. memory-swap이 지정되어 있지 않다면 container는 메모리의 두 배 공간을 swap 공간으로 사용할 수 있으며 30m이라고 정하면 최대 30MB만큼 swap 공간으로 사용할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;–cpu-shares가 지정되어 있지 않으면 모든 container가 동등하게 cpu를 사용한다. default는 전체(1024)를 사용할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;–cpuset-cpu: 시스템에 있는 CPU 중에서 사용할 CPU 셋을 지정할 수 있다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;–cpuset-cpus=0,1: CPU셋 0이나 1을 사용&lt;/li&gt;
      &lt;li&gt;–cpuset-cpus=0,1: 세 번째 CPU 셋을 사용&lt;/li&gt;
      &lt;li&gt;–cpuset-cpus=0,1: CPU 셋 1이나 2나 3을 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      
        <author>
            <name>pirunita</name>
          
          
        </author>
      

      

      
        <category term="DevOps" />
      

      
        <summary type="html">컨테이너 이미지 실행하기   docker run 커맨드는 인터넷이 연결되어 있다면 자동으로 image를 찾아서 다운받고 구동한다. 예를 들어 fedora를 container에 띄우고 싶을 때 docker run fedora cat /etc/os-release cat /etc/os-release: container에 실행되고 있는 OS의 버전과 종류 확인 이미지 이름 뒤에 태그를 지정하지 않았ㅇ므ㅡ로 :latest를 지정 Image vs Container Image: Container instance가 영구적으로 저장된 것 docker images: 현재 시스템에 저장된 이미지를 볼 수 있다. docker rmi : 원하는 image 삭제 docker run: image 실행 Container: Image를 실행하면 container가 생성되며 백그라운드에서 실행하면(-d 옵션) 커맨드 종료 후에도 계속 구동할 수 있다. docker ps: 현재 실행 중인 컨테이너를 본다. -a: container가 종료될 때 그 시점의 container 상태가 저장되며 그 때 -a를 붙여도 표시되지 않는다. docker start : 컨테이너 재구동 -i: container의 실행 결과가 로컬 셸로 전달된다. docker start -i 28172e7ffbc6 docker stop : 컨테이너 멈춤 인터렉티브 방식으로 container image 구동하기   Container image를 구동하면, 지정한 커맨드를 실행한 뒤에 종료한다. -d: 웹 서버, 프린트 서비스와 같이 지속적으로 서비스를 제공하도록 커맨드를 백그라운드에서 계속 실행하게 한다. -i: 포그라운드에서 인터렉티브 방식으로 실행한다. -t: 인터렉티브 방식으로 실행할 때는 -t 옵션을 지정해서 터미널 세션을 별도로 열어주면 좋다. 배시 셸 구동하기   Container 안에서 별도로 셸을 실행해 작업을 수행하려면 container를 인터렉티브 방식으로 구동하는 것이 좋으며 container 내부에서 내용을 수정할 수 있다. docker run -it ubuntu /bin/bash Container 내부에 bash shell을 띄웠으므로 어떤 프로세스가 실행되고 있는 지 확인 해 보자. root@baf3c3803a19:/# ps -e PID TTY TIME CMD 1 pts/0 00:00:00 bash 13 pts/0 00:00:00 ps ID가 1인 프로세스는 bash command 현재 실행되고 있는 프로세스는 ps command Container마다 별도의 프로세스 테이블을 갖기 때문에 host의 프로세스는 확인 불가능 Container 내부에 필요한 패키지를 설치한 후 exit를 통해 Container를 빠져나온다. 이 시점에서 Container를 image로 저장해두면 이 환경을 그대로 사용할 수 있다. khosungpil@khosungpil  ~/docker   master  docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES baf3c3803a19 ubuntu &quot;/bin/bash&quot; 5 minutes ago Exited (127) About a minute ago khosungpil@khosungpil  ~/docker   master  docker commit -a &quot;John&quot; baf3c3803a19 testrun 이러면 로컬 시스템에 testrun이란 이름의 image가 생성되며 docker run을 통해 바로 사용할 수 있다. 서비스를 Container로 만들어 실행하기   호스트에서 서비스를 직접 구동하는 것보다 서비스를 Container에 담아 실행하는 편이 더 유리하다. 설정: 서비스를 Container 안에 담으면 서비스에 필요한 실행 파일, 라이브러리, 설정 파일 등 다양한 요소를 모두 설정할 수 있으며 다른 호스트에게 Image로 옮길 수 있다. 격리: Container마다 파일 시스템과 네트워크 인터페이스를 별도로 갖고 있기 때문에 동일한 서비스 Container를 원하는 수만큼 실행할 수 있다. Container로 웹 서버 실행 docker run -d -p 80:80 -p 443:443 --name=MyWebServer \ -v /var/www/:/var/www testrun \ /usr/sbin/httpd -DFOREGROUND -d: 데몬 모드로 실행, Container를 백그라운드에서 실행한다. -p 80:80, -p 443:443: 포트 매핑, Container의 포트를 호스트의 포트에 연결한다. 클론의 왼쪽은 호스트의 포트고 오른쪽은 Container의 포트, Container의 TCP 80 포트(HTTP)와 443번 포트(HTTPS)를 호스트의 동일한 포트로 연결 –name=MyWebServer: Container 이름, Container ID 대신 지정한 이름을 사용할 수 있다. -v /var/www/ : /var/www/: 마운트 지점 지정, 호스트의 디렉토리(클론의 왼쪽)를 Container의 디렉토리(클론의 오른쪽)에 마운트한다. -v 옵션을 사용해 apache의 default directory에 있는 공유 웹 콘텐츠를 사용하도록 지정 testrun: Image, 예제에서 사용한 Image 이름 /usr/sbin/httpd -DFOREGROUND: 커맨드, httpd 데몬에 -DFOREGROUND 옵션을 지정해 실행 따라서 호스트의 모든 IPV4 네트워크 인터페이스의 TCP 80번과 443번 포트로 들어오는 요청은 Container의 동일한 포트로 전달된다. 구동중인 Container 내부를 탐색핫기 위해서 bash를 다시 실행할 수 있다. docker exec -it MyWebServer /bin/bash Container에서 실행하는 서비스에서 사용할 resource 제한   Container의 default는 메모리와 CPU의 사용량을 제한하지 않는다. –memory, –memory-swap, –cpu-shares, –cpuset-cpus 같은 옵션으로 메모리 용량과 CPU 개수에 제한을 걸 수 있다. docker run -d -p 80:80 -p 443:443 --name=LimitedWebServer \ -v /var/www/ : /var/www/ --memory=10m -memory-swap=-1 \ --cpu-shares=256 testrun /usr/sbin/httpd -DFOREGROUND 여기서 Container는 10MB의 RAM만 사용할 수 있다. memory-swap이 지정되어 있지 않다면 container는 메모리의 두 배 공간을 swap 공간으로 사용할 수 있으며 30m이라고 정하면 최대 30MB만큼 swap 공간으로 사용할 수 있다. –cpu-shares가 지정되어 있지 않으면 모든 container가 동등하게 cpu를 사용한다. default는 전체(1024)를 사용할 수 있다. –cpuset-cpu: 시스템에 있는 CPU 중에서 사용할 CPU 셋을 지정할 수 있다. –cpuset-cpus=0,1: CPU셋 0이나 1을 사용 –cpuset-cpus=0,1: 세 번째 CPU 셋을 사용 –cpuset-cpus=0,1: CPU 셋 1이나 2나 3을 사용</summary>
      

      
      
    </entry>
  
  
  
    <entry xml:lang="ko">
      
      <title type="html">2019-04-21</title>
      
      
      <link href="http://localhost:4000/2019/04/21/Daily/" rel="alternate" type="text/html" title="2019-04-21" />
      
      <published>2019-04-21T03:00:00+00:00</published>
      <updated>2019-04-21T03:00:00+00:00</updated>
      <id>http://localhost:4000/2019/04/21/Daily</id>
      <content type="html" xml:base="http://localhost:4000/2019/04/21/Daily/">&lt;h3&gt;일상 및 생각&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;이번 주는 창업에 있어서 본격적인 사업화 지원서류를 많이 제출하고 발표도 하러 다녔다. 작년에도 몇 개 넣어서 적은 자금을 확보했지만, 정부 차원에서 큰 규모의 사업을 지원한 것은 처음이라 중요하고 또 떨렸다(내가 발표도 안했는데..). 그래도 지난 1년 간 해 왔던 것 그리고 우리 대표님이 워낙 언변이 좋아서 느낌이 좋다. 제발!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;학교에서 중간고사 시즌인가보다. 그 뜻은 내 휴학도 절반정도 지나갔다고 할 수 있는데, 반 학기동안 내가 잘 해 왔는 지 열심히 살았는 지 되돌아보게 된다. 역시나 게을렀던 것 같다..여름 전 까지 후회없이&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;탄천에서 자전거를 타 보았다. 길이 좁고 산책로랑 많이 겹쳐서 한강 자전거길처럼 빨리 달릴 순 없지만 경치가 너무 이쁘고 다 지지 못한 벚꽃들도 많아서 이뻤다. 또 너무 좋은사람과 함께 있어서 더 좋았고 자전거를 타면서 맞는 바람과 함께 따라오는 탄천의 물내음이 감동적이었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이번 주도 할 일이 많아졌다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      
        <author>
            <name>pirunita</name>
          
          
        </author>
      

      

      
        <category term="Daily" />
      

      
        <summary type="html">일상 및 생각 이번 주는 창업에 있어서 본격적인 사업화 지원서류를 많이 제출하고 발표도 하러 다녔다. 작년에도 몇 개 넣어서 적은 자금을 확보했지만, 정부 차원에서 큰 규모의 사업을 지원한 것은 처음이라 중요하고 또 떨렸다(내가 발표도 안했는데..). 그래도 지난 1년 간 해 왔던 것 그리고 우리 대표님이 워낙 언변이 좋아서 느낌이 좋다. 제발! 학교에서 중간고사 시즌인가보다. 그 뜻은 내 휴학도 절반정도 지나갔다고 할 수 있는데, 반 학기동안 내가 잘 해 왔는 지 열심히 살았는 지 되돌아보게 된다. 역시나 게을렀던 것 같다..여름 전 까지 후회없이 탄천에서 자전거를 타 보았다. 길이 좁고 산책로랑 많이 겹쳐서 한강 자전거길처럼 빨리 달릴 순 없지만 경치가 너무 이쁘고 다 지지 못한 벚꽃들도 많아서 이뻤다. 또 너무 좋은사람과 함께 있어서 더 좋았고 자전거를 타면서 맞는 바람과 함께 따라오는 탄천의 물내음이 감동적이었다. 이번 주도 할 일이 많아졌다.</summary>
      

      
      
    </entry>
  
  
  
    <entry xml:lang="ko">
      
      <title type="html">2019-04-15</title>
      
      
      <link href="http://localhost:4000/2019/04/15/Daily/" rel="alternate" type="text/html" title="2019-04-15" />
      
      <published>2019-04-15T15:00:00+00:00</published>
      <updated>2019-04-15T15:00:00+00:00</updated>
      <id>http://localhost:4000/2019/04/15/Daily</id>
      <content type="html" xml:base="http://localhost:4000/2019/04/15/Daily/">&lt;h3&gt;헛소리&lt;/h3&gt;
&lt;p&gt;  나에게 있어 글을 쓴다는 것은 항상 어색한 것 같다. 글재주도 없지만 내가 어떤 글을 쓰고 몇 개월 후에 그 글을 다시 봤을 때 마치 타인에 의해 작성된 느낌을 지울 수 없다. 그래서 블로그를 시작한다고 매년 초에 다짐을 하고 예전에 만들어 두었던 블로그에 들어가면 그 직전 해 초에 썼던 글만이 완성되지 않은 채 나를 본다. 그렇게 잊혀지고 버려진 글은 모니터를 뚫고 나에게 이렇게 묻는 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“왜 이제서야 들어와 빨리 수정해서 네 글을 완성시켜”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;당연히 그 글은 완성할 수 없다. 1년 전의 나와 지금의 나는 좋든, 나쁘든 어느 쪽으로 변화가 일어났기 때문에 그 버려진 글을 꺼내는 것은 2명의 작성자가 하나의 글을 쓰는 것과 다를 바 없다.&lt;/p&gt;

&lt;p&gt;작성하다 만 글을 더 이상 양산하고 싶지 않기 때문에 지금 늦었고 졸리지만 뭔가 쓰고싶다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3&gt;일상 및 생각&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;올 2월 초, 미국에서 SW Maestro를 함께 했던 팀원 2명과 작년에 개발했던 프로젝트를 개량하여 창업을 하기로 뜻을 모았다. 그리고 오늘 창업경진대회 관련해서 신청서를 냈고 수정 된 모델을 학습시키는 중이다. 요즘 training을 많이 해서 GPU가 쉴 틈이 없다. 그래도 아주 디테일한 부분을 제외하면 작년보다 퀄리티는 더욱 좋아졌고 inference time도 많이 감소했다. 딥러닝 모델이 점점 똑똑해져 갔다. &lt;em&gt;그런데 나는 멍청해져 가는 것 같다.&lt;/em&gt; &lt;br /&gt;
구글 머신러닝 스터디잼으로라도 공부를 다시 해야겠다. Python3-OpenCV도 생각날 때 하는 중이다. 재밌기는 한 데, 원리를 잘 모르겠다. 고양이 책을 다시 봐야 할 것 같다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;좋은 사람을 만나고 있다. 이걸 보고 있다면 카톡 주세요.&lt;/li&gt;
  &lt;li&gt;만일을 대비해서 알고리즘을 해 두어야겠다고 생각했다. 그래서 정말 짬이 날 때 놀지만, 그냥 생각날 때 hackerrank를 본다. 내일도 하나 봐야겠다. 그래야 1일 1커밋을 할 ㅅ&lt;/li&gt;
  &lt;li&gt;Docker 좀 잘 쓰고 싶어서 휴학생도서대출 신청까지하며 보는 데 너무 재미가 없다. 서비스화 할 때 꼭 필요할 지 싶어서 조금씩 봐 두고 있다. Kubernetes는..잘 모르겠다.&lt;/li&gt;
  &lt;li&gt;최근에 갑자기 kotlin을 배워보고 싶다는 생각이 강하게 들고 있다. 여태까지 졸업프로젝트고 PS고 다 JAVA로 해결 해 왔는데 JAVA보다 더 좋은 kotlin이라니 정말로 궁금하다. ‘high performance python’이라는 책을 보고 있는데 python은 정말 재미가 없다. C++은 조금 재미있다.&lt;/li&gt;
  &lt;li&gt;쓰다보니 이게 일상인 지 프로그래밍 이야기인지 모르겠다. 언제부턴가 내 일상에 프로그래밍이 너무 가득 차 버렸다. 재밌긴 한데 공부를 안 한다. 당연히 공부를 안 하고 잘 하고 싶은 것은 욕심쟁이다. 그래도 욕심쟁이가 되고 싶다. 어쨌든 나만의 깃허브페이지에 처음으로 내가 했던 생각들을 올리니 뭔가 개운한 기분이 들
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
기는 무슨 너무 졸리니까 자야겠다.&lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      
        <author>
            <name>pirunita</name>
          
          
        </author>
      

      

      
        <category term="Daily" />
      

      
        <summary type="html">헛소리   나에게 있어 글을 쓴다는 것은 항상 어색한 것 같다. 글재주도 없지만 내가 어떤 글을 쓰고 몇 개월 후에 그 글을 다시 봤을 때 마치 타인에 의해 작성된 느낌을 지울 수 없다. 그래서 블로그를 시작한다고 매년 초에 다짐을 하고 예전에 만들어 두었던 블로그에 들어가면 그 직전 해 초에 썼던 글만이 완성되지 않은 채 나를 본다. 그렇게 잊혀지고 버려진 글은 모니터를 뚫고 나에게 이렇게 묻는 것 같다. “왜 이제서야 들어와 빨리 수정해서 네 글을 완성시켜” 당연히 그 글은 완성할 수 없다. 1년 전의 나와 지금의 나는 좋든, 나쁘든 어느 쪽으로 변화가 일어났기 때문에 그 버려진 글을 꺼내는 것은 2명의 작성자가 하나의 글을 쓰는 것과 다를 바 없다. 작성하다 만 글을 더 이상 양산하고 싶지 않기 때문에 지금 늦었고 졸리지만 뭔가 쓰고싶다. 일상 및 생각 올 2월 초, 미국에서 SW Maestro를 함께 했던 팀원 2명과 작년에 개발했던 프로젝트를 개량하여 창업을 하기로 뜻을 모았다. 그리고 오늘 창업경진대회 관련해서 신청서를 냈고 수정 된 모델을 학습시키는 중이다. 요즘 training을 많이 해서 GPU가 쉴 틈이 없다. 그래도 아주 디테일한 부분을 제외하면 작년보다 퀄리티는 더욱 좋아졌고 inference time도 많이 감소했다. 딥러닝 모델이 점점 똑똑해져 갔다. 그런데 나는 멍청해져 가는 것 같다. 구글 머신러닝 스터디잼으로라도 공부를 다시 해야겠다. Python3-OpenCV도 생각날 때 하는 중이다. 재밌기는 한 데, 원리를 잘 모르겠다. 고양이 책을 다시 봐야 할 것 같다. 좋은 사람을 만나고 있다. 이걸 보고 있다면 카톡 주세요. 만일을 대비해서 알고리즘을 해 두어야겠다고 생각했다. 그래서 정말 짬이 날 때 놀지만, 그냥 생각날 때 hackerrank를 본다. 내일도 하나 봐야겠다. 그래야 1일 1커밋을 할 ㅅ Docker 좀 잘 쓰고 싶어서 휴학생도서대출 신청까지하며 보는 데 너무 재미가 없다. 서비스화 할 때 꼭 필요할 지 싶어서 조금씩 봐 두고 있다. Kubernetes는..잘 모르겠다. 최근에 갑자기 kotlin을 배워보고 싶다는 생각이 강하게 들고 있다. 여태까지 졸업프로젝트고 PS고 다 JAVA로 해결 해 왔는데 JAVA보다 더 좋은 kotlin이라니 정말로 궁금하다. ‘high performance python’이라는 책을 보고 있는데 python은 정말 재미가 없다. C++은 조금 재미있다. 쓰다보니 이게 일상인 지 프로그래밍 이야기인지 모르겠다. 언제부턴가 내 일상에 프로그래밍이 너무 가득 차 버렸다. 재밌긴 한데 공부를 안 한다. 당연히 공부를 안 하고 잘 하고 싶은 것은 욕심쟁이다. 그래도 욕심쟁이가 되고 싶다. 어쨌든 나만의 깃허브페이지에 처음으로 내가 했던 생각들을 올리니 뭔가 개운한 기분이 들 기는 무슨 너무 졸리니까 자야겠다.</summary>
      

      
      
    </entry>
  
  
  
    <entry xml:lang="ko">
      
      <title type="html">[Docker] Docker 기초 및 command 정리</title>
      
      
      <link href="http://localhost:4000/2019/04/10/Docker-Docker_basic_command/" rel="alternate" type="text/html" title="[Docker] Docker 기초 및 command 정리" />
      
      <published>2019-04-10T15:00:00+00:00</published>
      <updated>2019-04-10T15:00:00+00:00</updated>
      <id>http://localhost:4000/2019/04/10/%5BDocker%5DDocker_basic_command</id>
      <content type="html" xml:base="http://localhost:4000/2019/04/10/Docker-Docker_basic_command/">&lt;h2&gt;Docker basic &amp;amp; Command&lt;/h2&gt;
&lt;hr /&gt;

&lt;h3&gt;왜 Docker를 사용하는가?&lt;/h3&gt;
&lt;p&gt;  Containers는 하나의 서로 다른 프로그램이나 프로세스를 고립시키는 방법이며, 프로그램이 오류없이 빠르게 deploy를 시킬 수 있게한다. 또한 application을 호스트 컴퓨터에 직접 설치할 때보다 높은 유연성을 제공하며 가상머신과 비교했을 때 CPU, 메모리, 디스크 공간과 같은 시스템 리소스를 적게 소비한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;Docker 이미지와 컨테이너&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Containerization: Application을 하나의 컨테이너 단위로 구동하는 데 필요한 모든 구성 요소(라이브러리, 설정 파일, 실행 파일 등..)를 하나로 묶는다. 이러한 단위를 &lt;strong&gt;image&lt;/strong&gt;라고 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Image: 도커가 설치되고 구동할 준비를 하고 있는 로컬 파일 시스템, 또는 repository에 저장된 하나의 정적인 단위.
    &lt;ul&gt;
      &lt;li&gt;Image를 파일시스템에 저장하면 tarb4all(tar.gz) 파일 형태로 저장된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Container: Docker Image를 구동한 instance를 의미한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3&gt;Docker command&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Docker 구성 요소에 대한 정보 조회
    &lt;ul&gt;
      &lt;li&gt;docker version: Docker의 버전 정보&lt;/li&gt;
      &lt;li&gt;docker info: Docker를 구동하는 시스템에 대한 정보&lt;/li&gt;
      &lt;li&gt;docker comand: Docker command에서 사용할 수 있는 subcommand와 option을 보여준다.&lt;/li&gt;
      &lt;li&gt;docker history: &lt;strong&gt;Image&lt;/strong&gt;에 대한 히스토리 정보를 보여준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;실행 중인 Container 다루기
    &lt;ul&gt;
      &lt;li&gt;docker ps: 현재 실행 중인 container list를 보여준다.
        &lt;ul&gt;
          &lt;li&gt;-a: 모든 container의 상태를 보여준다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;docker attach: 실행 중인 cantainer에 다른 command를 붙인다.&lt;/li&gt;
      &lt;li&gt;docker exec: 현재 실행 중인 컨테이너에서 command를 실행한다.&lt;/li&gt;
      &lt;li&gt;docker inspect: container의 metadata를 본다.&lt;/li&gt;
      &lt;li&gt;docker cp: container에 있는 파일을 호스트 시스템으로 복사&lt;/li&gt;
      &lt;li&gt;docker diff: container를 구동한 후에 컨테이너의 파일시스템에서 변경된 사항을 확인&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Image 다루기
    &lt;ul&gt;
      &lt;li&gt;docker images: 시스템에 있는 image 리스트를 보여준다.&lt;/li&gt;
      &lt;li&gt;docker run: image를 실행한다.
        &lt;ul&gt;
          &lt;li&gt;-rm: 프로세스가 종료되면 컨테이너 자동 삭제&lt;/li&gt;
          &lt;li&gt;-it: container 내부에 들어가기 위해 bash 키보드 입력 설정 추가&lt;/li&gt;
          &lt;li&gt;/bin/bash: bash쉘 실행
            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --rm -it &amp;lt;image_name&amp;gt; /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;docker pull: 레지스트리에서 image를 가져온다.
        &lt;ul&gt;
          &lt;li&gt;docker pull ubuntu:latest&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;docker push: 레지스트리에 image를 올린다.&lt;/li&gt;
      &lt;li&gt;docker load: 로컬 시스템에 tarball 형태로 존재하는 image를 불러온다.&lt;/li&gt;
      &lt;li&gt;docker export: container의 파일시스템을 로컬 시스템에 tarball 형태로 내보낸다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Docker 레지스트리 다루기
    &lt;ul&gt;
      &lt;li&gt;docker search: 레지스트리에서 이미지를 검색한다.(자신의 계정에 image를 올리거나 가져올 때)&lt;/li&gt;
      &lt;li&gt;docker login: 도커 허브 레지스트리 로그인&lt;/li&gt;
      &lt;li&gt;docker logout: 도커 허브 레지스트리 로그아웃&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기존 이미지 수정하기
    &lt;ul&gt;
      &lt;li&gt;docker tag: image에 이름을 붙인다.&lt;/li&gt;
      &lt;li&gt;docker rename: image의 이름을 변경한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;container 상태 변경하기
    &lt;ul&gt;
      &lt;li&gt;docker pause: 실행 중인 container 일시 정지&lt;/li&gt;
      &lt;li&gt;docker unpause: 일시 정지한 이미지를 다시 시작&lt;/li&gt;
      &lt;li&gt;docker kill: container에게 kill 신호를 보냄&lt;/li&gt;
      &lt;li&gt;docker restart: container를 멈췄다가 다시 시작&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;docker 상태 관찰하기
    &lt;ul&gt;
      &lt;li&gt;docker events: 도커 서버에서 발생한 이벤트 확인&lt;/li&gt;
      &lt;li&gt;docker top: container의 프로세스 현황 확인&lt;/li&gt;
      &lt;li&gt;docker logs: container에서 생성한 로그 메시지 확인&lt;/li&gt;
      &lt;li&gt;docker stats: container에 대한 CPU 및 메모리 사용량 확인&lt;/li&gt;
      &lt;li&gt;docker wait: container가 멈출 때까지 관찰하며 container의 종료 코드를 화면에 표시&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Image나 container 생성하기
    &lt;ul&gt;
      &lt;li&gt;docker build: Image를 새로 생성
        &lt;ul&gt;
          &lt;li&gt;-t: image name을 붙임&lt;/li&gt;
          &lt;li&gt;dockerfile이 같은 폴더 내에 위치할 경우
            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t &amp;lt;image_name&amp;gt; ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;docker rmi: Image를 제거
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker rmi &amp;lt;image_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;none으로 지정된 이름을 제거하기 위해
            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker rmi $(docker images -a|grep &quot;&amp;lt;none&amp;gt;&quot;|awk '{print $3}')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;자주 사용하는 옵션
    &lt;ul&gt;
      &lt;li&gt;d: detached mode, 백그라운드 모드&lt;/li&gt;
      &lt;li&gt;p: 호스트와 container의 포트를 연결(포워딩)&lt;/li&gt;
      &lt;li&gt;v: 호스트와 container의 디렉토리를 연결(마운트)&lt;/li&gt;
      &lt;li&gt;e: container 내에서 사용 할 환경변수 설정&lt;/li&gt;
      &lt;li&gt;name: container 이름 설정&lt;/li&gt;
      &lt;li&gt;rm: 프로세스 종료 시 container 자동 삭제&lt;/li&gt;
      &lt;li&gt;it: 터미널 입력을 위한 옵션&lt;/li&gt;
      &lt;li&gt;link: container 연결&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      
        <author>
            <name>pirunita</name>
          
          
        </author>
      

      

      
        <category term="DevOps" />
      

      
        <summary type="html">Docker basic &amp;amp; Command 왜 Docker를 사용하는가?   Containers는 하나의 서로 다른 프로그램이나 프로세스를 고립시키는 방법이며, 프로그램이 오류없이 빠르게 deploy를 시킬 수 있게한다. 또한 application을 호스트 컴퓨터에 직접 설치할 때보다 높은 유연성을 제공하며 가상머신과 비교했을 때 CPU, 메모리, 디스크 공간과 같은 시스템 리소스를 적게 소비한다. Docker 이미지와 컨테이너 Containerization: Application을 하나의 컨테이너 단위로 구동하는 데 필요한 모든 구성 요소(라이브러리, 설정 파일, 실행 파일 등..)를 하나로 묶는다. 이러한 단위를 image라고 한다. Image: 도커가 설치되고 구동할 준비를 하고 있는 로컬 파일 시스템, 또는 repository에 저장된 하나의 정적인 단위. Image를 파일시스템에 저장하면 tarb4all(tar.gz) 파일 형태로 저장된다. Container: Docker Image를 구동한 instance를 의미한다. Docker command Docker 구성 요소에 대한 정보 조회 docker version: Docker의 버전 정보 docker info: Docker를 구동하는 시스템에 대한 정보 docker comand: Docker command에서 사용할 수 있는 subcommand와 option을 보여준다. docker history: Image에 대한 히스토리 정보를 보여준다. 실행 중인 Container 다루기 docker ps: 현재 실행 중인 container list를 보여준다. -a: 모든 container의 상태를 보여준다. docker attach: 실행 중인 cantainer에 다른 command를 붙인다. docker exec: 현재 실행 중인 컨테이너에서 command를 실행한다. docker inspect: container의 metadata를 본다. docker cp: container에 있는 파일을 호스트 시스템으로 복사 docker diff: container를 구동한 후에 컨테이너의 파일시스템에서 변경된 사항을 확인 Image 다루기 docker images: 시스템에 있는 image 리스트를 보여준다. docker run: image를 실행한다. -rm: 프로세스가 종료되면 컨테이너 자동 삭제 -it: container 내부에 들어가기 위해 bash 키보드 입력 설정 추가 /bin/bash: bash쉘 실행 docker run --rm -it &amp;lt;image_name&amp;gt; /bin/bash docker pull: 레지스트리에서 image를 가져온다. docker pull ubuntu:latest docker push: 레지스트리에 image를 올린다. docker load: 로컬 시스템에 tarball 형태로 존재하는 image를 불러온다. docker export: container의 파일시스템을 로컬 시스템에 tarball 형태로 내보낸다. Docker 레지스트리 다루기 docker search: 레지스트리에서 이미지를 검색한다.(자신의 계정에 image를 올리거나 가져올 때) docker login: 도커 허브 레지스트리 로그인 docker logout: 도커 허브 레지스트리 로그아웃 기존 이미지 수정하기 docker tag: image에 이름을 붙인다. docker rename: image의 이름을 변경한다. container 상태 변경하기 docker pause: 실행 중인 container 일시 정지 docker unpause: 일시 정지한 이미지를 다시 시작 docker kill: container에게 kill 신호를 보냄 docker restart: container를 멈췄다가 다시 시작 docker 상태 관찰하기 docker events: 도커 서버에서 발생한 이벤트 확인 docker top: container의 프로세스 현황 확인 docker logs: container에서 생성한 로그 메시지 확인 docker stats: container에 대한 CPU 및 메모리 사용량 확인 docker wait: container가 멈출 때까지 관찰하며 container의 종료 코드를 화면에 표시 Image나 container 생성하기 docker build: Image를 새로 생성 -t: image name을 붙임 dockerfile이 같은 폴더 내에 위치할 경우 docker build -t &amp;lt;image_name&amp;gt; ./ docker rmi: Image를 제거 docker rmi &amp;lt;image_name&amp;gt; none으로 지정된 이름을 제거하기 위해 docker rmi $(docker images -a|grep &quot;&amp;lt;none&amp;gt;&quot;|awk '{print $3}') 자주 사용하는 옵션 d: detached mode, 백그라운드 모드 p: 호스트와 container의 포트를 연결(포워딩) v: 호스트와 container의 디렉토리를 연결(마운트) e: container 내에서 사용 할 환경변수 설정 name: container 이름 설정 rm: 프로세스 종료 시 container 자동 삭제 it: 터미널 입력을 위한 옵션 link: container 연결</summary>
      

      
      
    </entry>
  
  
  
    <entry xml:lang="ko">
      
      <title type="html">딥러닝 공부 기초</title>
      
      
      <link href="http://localhost:4000/2018/12/23/DeepLearningBasic/" rel="alternate" type="text/html" title="딥러닝 공부 기초" />
      
      <published>2018-12-23T14:00:00+00:00</published>
      <updated>2018-12-23T14:00:00+00:00</updated>
      <id>http://localhost:4000/2018/12/23/DeepLearningBasic</id>
      <content type="html" xml:base="http://localhost:4000/2018/12/23/DeepLearningBasic/">&lt;h4&gt;Deep Learning from Scratch(밑바닥부터 시작하는 딥러닝), Saito koki, 한빛미디어&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;Chapter 1, 2 : 생략&lt;br /&gt;
Chapter 3 : &lt;a href=&quot;https://github.com/pirunita/DeepLearningBasic/blob/master/Chapter%203.%20Neural%20Network.ipynb&quot;&gt;[click]&lt;/a&gt;&lt;br /&gt;
Chapter 4 : &lt;a href=&quot;https://github.com/pirunita/DeepLearningBasic/blob/master/Chapter%204.%20Neural%20Network%20Training.ipynb&quot;&gt;[click]&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>pirunita</name>
          
          
        </author>
      

      

      
        <category term="DeepLearning" />
      

      
        <summary type="html">Deep Learning from Scratch(밑바닥부터 시작하는 딥러닝), Saito koki, 한빛미디어 Chapter 1, 2 : 생략 Chapter 3 : [click] Chapter 4 : [click]</summary>
      

      
      
    </entry>
  
  
</feed>
